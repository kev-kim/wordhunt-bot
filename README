Kevin Kim
kkim170

The structure of the program is not necessarily complex, but each function
is complex to its own. The main structure of both CTrie.cpp and TTrie.inc
are essentially just lists of functions.

Default Constructor Functions
CTrie() and TTrie():
Self-explanatory. The only thing I had to make sure was that the private
field boolean isEnd is set to false.

Copy Constructor Functions
CTrie(const CTrie& rhs) and TTrie(const TTrie& rhs):
Also self-explanatory. The interesting thing about these constructors was
that they used the overloaded assignment operator, which made the copy
constructors easy one-liners.

Destructor Functions
~CTrie() and ~TTrie():
These were pretty self explanatory as well. For both, the function just
iterates through the child nodes with an iterator and deletes each child
recursively. One thing to note is that the memory is cleared at the end
of each function call.

Assignment Operator (=)
This overload function was not difficult either. First, it deletes the
child nodes of the left-hand side, then replaces them with values from
the right-hand side.

Addition/Assignment Operator (+=)
This was accomplished by iterating through the word/vector (for CTrie and
TTrie, respectively), then determining if this CTrie has the letter or not,
and if it doesn't it links the character to the Trie. Finally, the function
sets the endpoint at the last character.

Carat Operator (^)
This operator is accomplished recursively. The funtion iterates through the
Trie, and considers each character based on the equality operator, then it
recursively calls on itself with a string with 1 less character, until the
word is empty as a base case.

Equality Operator (==)
This operator was accomplished through a reverse logic: it checked for
when they are NOT equal, rather than equal. This way, there was no need
to store some boolean of "has been equal) quality. Thus, when there is
no case where the two objects are not equal, then it must be equal.

Output Stream Operator (<<)
For this operator, I followed the hint on the Google Doc and created
a helper function, so that the actual operator overload is only 2 lines,
where it calls ct.output_trie(os, ""). The helper function works by
iterating through the Trie and only printing to the output stream when
the iterator has reached a end child node.

The other functions are self-explanatory, so no further discussion on them.

